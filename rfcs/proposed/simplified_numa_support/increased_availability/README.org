# -*- fill-column: 80; -*-

#+title: Improve predictability of API for NUMA support

*Note:* This is a sub-RFC of the https://github.com/oneapi-src/oneTBB/pull/1535.
Specifically, its section about "Increased availability of NUMA support".

* Introduction
oneTBB has a soft dependency on several variants of ~tbbbind~, which are loaded by
the library as part of its initialization stage. In turn, each ~tbbbind~ has
a hard dependency, i.e., relies on load-time linking, on a concrete version of the
HWLOC library [1, 2]. The soft dependency of oneTBB on ~tbbbind~ allows the
library to continue its execution even if the system loader is unable to resolve
the hard dependency on HWLOC for ~tbbbind~. In this case, the NUMA support API does
nothing. An error is also not reported and the code that uses NUMA support
facilities may continue running expecting it to work. Such behavior is not
readily noticable by the users of oneTBB and this represents the main problem
with the current behavior.

Having a dependency on a shared HWLOC library has a number of advantages:
1. Code reuse with all of the positive consequences out of this. That's the
   primary purpose of shared libraries.
2. Sharing HWLOC context between its clients. This avoids performing
   the same operations repeatedly with identical results.
3. A drop-in replacement. Users are able to use their own version of HWLOC
   without recompilation of oneTBB.

The only disadvantage from depending on HWLOC dynamically is that user needs to
make sure the library is available and can be found by oneTBB. Depending on the
distribution model of a user's code, this is achieved either by:
1. Asking the end user to have necessary version of a dependency pre-installed.
2. Bundling necessary HWLOC version together with other pieces of a product
   release.

However, the requirement to fulfill one of the above steps for the NUMA API to
start paying off may be considered as an incovenience for users of oneTBB and,
what is more important, it is not always obvious. Especially, due to silent
behavior in case HWLOC library cannot be found in the environment.

This proposal suggests an improvement on these two points by having HWLOC
library linked statically with one of the ~tbbbind~ libraries that are
distributed together with oneTBB.

[1] [[https://www.open-mpi.org/projects/hwloc/][HWLOC project main page]]

[2] [[https://github.com/open-mpi/hwloc][HWLOC project repository on GitHub]]

* Proposal
Introduce:
1. New version of ~tbbbind~ shared library with the name ~tbbbind_static~ that is
   statically-linked with HWLOC library and distributed along side with the other
   ~tbbbind~ versions.
2. Loading of the new ~tbbbind_static~ as the last attempt, i.e., a fallback
   path, to resolve the dependency on functionality provided by ~tbbbind~ layer.
3. Printing what ~tbbbind~ version is used when ~TBB_VERSION=1~ environment
   variable is present.

** Advantages
The proposed behavior allows having a fallback mechanism for resolving a
dependency on HWLOC library in case it cannot be found in the environment, while
still preferring user-provided version of HWLOC.

As a result, the following use of oneTBB API should work as expected, returning
enumerated list of actual NUMA nodes and core types on the system the code is
running on, provided that the loaded HWLOC library works on that system:

#+begin_src C++
std::vector<oneapi::tbb::numa_node_id> numa_nodes = oneapi::tbb::info::numa_nodes();
std::vector<oneapi::tbb::core_type_id> core_types = oneapi::tbb::info::core_types();
#+end_src

** Disadvantages
1. The oneTBB distribution package is now extended with an additional version of
   ~tbbbind~ library that is statically linked with certain version of HWLOC.
2. Still silent by default behavior in case user failed to setup environment
   with their own version of HWLOC library correctly. Although, specifying
   ~TBB_VERSION=1~ envar will help identifying an issue with an environment
   setup pretty quickly.
3. Non-shared HWLOC context in case of ~tbbbind_static~ library is used.

* Alternative Solutions Considered
The other solution for being silent in case HWLOC library is not found is either
to issue a warning or to throw an exception.

Comparing these alternative solutions to the one proposed.
** Common Advantages
1. Explicitly tells the user that the functionality being used is not going to
   work.
2. Does not require additional version of ~tbbbind~ library to be distributed
   along with the others.

** Common Disadvantages
- Requires additional step from the user side to resolve the problem.

** Disadvantages of Issuing a Warning
- Does not solve the problem completely as a warning may still not be visible to
  the user, especially if standard streams are closed.

** Disadvantages of Throwing an Exception
1. May break existing code as it does not expect an exception to be thrown.
2. Requires introduction of an additional exception hierarchy
